trigger:
- main
- sonarqube

pool:
  vmImage: 'ubuntu-latest'

variables:
  buildConfiguration: 'Release'
  majorVersion: '1'
  minorVersion: '0'
  patchVersion: $(Build.BuildNumber)
  packageVersion: '$(majorVersion).$(minorVersion).$(patchVersion)'
  branchName: $[replace(variables['Build.SourceBranch'], 'refs/heads/', '')]
  
steps:
- script: |
    echo "=== VERSION INFORMATION ==="
    echo "Branch Name: $(branchName)"
    echo "Major Version: $(majorVersion)"
    echo "Minor Version: $(minorVersion)"
    echo "Patch Version: $(patchVersion)"
    echo "Full Package Version: $(packageVersion)"
    echo "Build Number: $(Build.BuildNumber)"
    echo "Build ID: $(Build.BuildId)"
    echo "Source Branch: $(Build.SourceBranch)"
    echo "=========================="
  displayName: 'Print version information to console'

- task: DotNetCoreCLI@2
  displayName: 'Restore packages'
  inputs:
    command: 'restore'
    projects: '**/*.csproj'

# Build for main branch (normal flow)
- task: DotNetCoreCLI@2
  displayName: 'Build project (main branch)'
  condition: eq(variables['branchName'], 'main')
  inputs:
    command: 'build'
    projects: '**/*.csproj'
    arguments: '--configuration $(buildConfiguration) --no-restore'

# SonarCloud flow for feature branches - prepare, build, analyze
- task: SonarCloudPrepare@2
  displayName: 'Prepare SonarCloud analysis'
  condition: eq(variables['branchName'], 'sonarqube')
  inputs:
    SonarCloud: 'cmdNorton_solid-pancake'
    organization: 'cmdnorton'
    scannerMode: 'MSBuild'
    projectKey: 'cmdNorton_solid-pancake'
    projectName: 'solid-pancake'
    projectVersion: '$(packageVersion)'

- task: DotNetCoreCLI@2
  displayName: 'Build project (with SonarCloud analysis)'
  condition: eq(variables['branchName'], 'sonarqube')
  inputs:
    command: 'build'
    projects: '**/*.csproj'
    arguments: '--configuration $(buildConfiguration) --no-restore'

- task: SonarCloudAnalyze@2
  displayName: 'Run SonarCloud analysis'
  condition: eq(variables['branchName'], 'sonarqube')

- task: SonarCloudPublish@2
  displayName: 'Publish SonarCloud results'
  condition: eq(variables['branchName'], 'sonarqube')
  continueOnError: true
  inputs:
    pollingTimeoutSec: '300'

# Pack with branch-specific naming
- task: DotNetCoreCLI@2
  displayName: 'Pack project (main branch)'
  condition: eq(variables['branchName'], 'main')
  inputs:
    command: 'pack'
    packagesToPack: '**/*.csproj'
    configuration: '$(buildConfiguration)'
    versioningScheme: 'byEnvVar'
    versionEnvVar: 'packageVersion'

- task: DotNetCoreCLI@2
  displayName: 'Pack project (feature branch with branch name)'
  condition: ne(variables['branchName'], 'main')
  inputs:
    command: 'pack'
    packagesToPack: '**/*.csproj'
    configuration: '$(buildConfiguration)'
    versioningScheme: 'byEnvVar'
    versionEnvVar: 'packageVersion'
    buildProperties: 'PackageId=azure_devops_git_$(branchName)'

- task: DotNetCoreCLI@2
  displayName: 'Publish to Azure Artifacts'
  inputs:
    command: 'push'
    publishVstsFeed: 'hello_world/pancake-feed'
    publishPackageMetadata: true

# Email notification - configure via Project Settings > Service hooks instead
- script: |
    echo "Email notification would be sent here"
    echo "Configure via Project Settings > Service hooks for automatic notifications"
  displayName: 'Email notification placeholder'
  condition: eq(variables['branchName'], 'sonarqube')
